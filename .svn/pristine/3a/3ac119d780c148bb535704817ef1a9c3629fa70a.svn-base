var app = new Vue({
    el: '#app',
    //数据区
    data: {
        json: {
            times: [],
            log_type: '',
            result: '',
            size: 10,
            page: 1,
        },
        result: ["成功", "失败"],
        type: ["登录日志", "操作日志"],
        result_options: [{
            "label": "全部",
            "value": ""
        }, {
            "label": "成功",
            "value": "0"
        }, {
            "label": "失败",
            "value": "1"
        }],
        type_options: [{
            "label": "全部",
            "value": ""
        }, {
            "label": "登录日志",
            "value": "0"
        }, {
            "label": "操作日志",
            "value": "1"
        }],
        datas: [],
        total: 0,
        selectOptions: [], //获取多选按钮选中的数据
    },
    //初始化区
    mounted: function () {
        this.initTime(7)
        this.search(1)
    },
    // 定义方法区
    methods: {
        //初始化日期文本框
        initTime(d) {
            this.json.times.push(dateFormat('YYYY-mm-dd HH:MM:SS', new Date(preDate(1, d))))
            this.json.times.push(dateFormat('YYYY-mm-dd HH:MM:SS', new Date()))
        },
        //搜索
        search(level) {
            if (this.json.times == '' || this.json.times == null) {
                this.$message({
                    message: '请选择时间后查询',
                    type: 'warning',
                    showClose: true,
                });
                return
            }
            var that = this
            var data = that.json
            //默认点击按钮搜索,设置当前页为第一页,否则就是当前页
            if (level == 0) {
                data.page = 1
                that.total = 0 //刷新分页
            }
            axios.get(WebAPI.manage + 'systemLog/getListByAdmin?times=' + data.times + '&log_type=' +
                data.log_type + '&result=' + data.result + '&page=' + data.page + '&size=' + data.size)
                .then(res = > {
                that.total = res.data.total
                that.datas = res.data.data
            }, err =
        >
            {
                console.log(err)
            }
        )
        },
        //每页条数发送改变
        handleSizeChange(val) {
            this.json.size = val
            this.search(1)
        },
        //当前页发生改变
        handleCurrentChange(val) {
            this.json.page = val
            this.search(1)
        },
        deleteInfo() {
            var arr = []
            this.selectOptions.forEach((item, index) = > {
                arr.push(item.log_id);
        })
            //base64加密
            arr = Base64.encode(arr)
            var that = this
            axios.delete(WebAPI.manage + 'systemLog/deleteByAdmin/' + arr).then(res = > {
                if(res.data.code == 200
        )
            {
                that.$message({
                    message: '删除成功',
                    type: 'success',
                    showClose: true,
                });
                that.search(1)
            }
        else
            {
                that.$message({
                    message: res.data.msg,
                    type: 'error',
                    showClose: true,
                });
            }
        },
            err =
        >
            {
                console.log(err)
            }
        )
        },
        //删除前的检查
        checkDel() {
            var len = this.selectOptions.length
            if (len == 0) {
                this.$message({
                    message: '至少选择一行数据',
                    type: 'warning',
                    showClose: true,
                });
                return
            }
            this.$confirm('确认删除 ' + len + ' 条数据吗?', '提示', {
                confirmButtonText: '确定',
                cancelButtonText: '取消',
                type: 'warning'
            }).then(() = > {
                this.deleteInfo();
        }).
            catch(() = > {}
        )
            ;
        },
        //获取多选按钮选中的数据
        handleSelectionChange(val) {
            this.selectOptions = val
        },
        //点击行触发，选中或不选中复选框
        handleRowClick(row, column, event) {
            this.$refs.multipleTable.toggleRowSelection(row)
        },
        formatLogType(row, column, cellValue, index) {
            return this.type[row.log_type]
        },
        formatResult(row, column, cellValue, index) {
            return this.result[row.result]
        }
    },
})
